create database assessment3
use assessment3

1) CREATE TABLE Coursedetails (
    C_id VARCHAR(10) PRIMARY KEY,
    C_Name VARCHAR(50),
    Start_date DATE,
    End_date DATE,
    Fee INT
);
 
INSERT INTO Coursedetails (C_id, C_Name, Start_date, End_date, Fee)
VALUES 
('DN003', 'dotnet', '2018-02-01', '2018-02-28', 15000),
('DV004', 'datavisualization', '2018-03-01', '2018-04-15', 15000),
('JA002', 'advancedjava', '2018-01-02', '2018-01-20', 10000),
('JC001', 'corejava', '2018-01-02', '2018-01-12', 3000);
 

2) CREATE FUNCTION CalculateCourseDuration(@start_date DATE, @end_date DATE)
RETURNS INT
AS
BEGIN
    RETURN DATEDIFF(DAY, @start_date, @end_date);
END;



SELECT
    C_id,
    C_Name,
    Start_date,
    End_date,
    Fee,
    dbo.CalculateCourseDuration(Start_date, End_date) AS course_duration_in_days
FROM Coursedetails;
 

 CREATE TABLE T_CourseInfo (
    CourseName VARCHAR(50),
    StartDate DATE
);

CREATE TRIGGER trg_Afterinsert
ON Coursedetails
AFTER INSERT
AS
BEGIN
    INSERT INTO T_CourseInfo (CourseName, StartDate)
    SELECT C_Name, Start_date
    FROM INSERTED;
END;

-- inserting a new course
INSERT INTO Coursedetails (C_id, C_Name, Start_date, End_date, Fee)
VALUES ('KT101', 'KOTLINBASICS', '2024-12-15', '2025-01-15', 16000);
 
-- Check the data in T_CourseInfo
SELECT * FROM T_CourseInfo;


CREATE TABLE ProductsDetails (
    ProductId INT IDENTITY(1,1) PRIMARY KEY,  
    ProductName VARCHAR(100) NOT NULL,
    Price DECIMAL(10, 2) NOT NULL,
    DiscountedPrice AS (Price - (Price * 0.1)) 
);

CREATE PROCEDURE InsertProductDetails
    @ProductName VARCHAR(100),
    @Price DECIMAL(10, 2),
    @GeneratedProductId INT OUTPUT,
    @DiscountedPrice DECIMAL(10, 2) OUTPUT
AS
BEGIN
    DECLARE @InsertedProducts TABLE (ProductId INT);
 
    INSERT INTO ProductsDetails (ProductName, Price)
    OUTPUT INSERTED.ProductId INTO @InsertedProducts
    VALUES (@ProductName, @Price);
 
    SELECT @GeneratedProductId = ProductId FROM @InsertedProducts;
 
    SET @DiscountedPrice = @Price - (@Price * 0.1);
END;


DECLARE @GeneratedProductId INT, @DiscountedPrice FLOAT(10, 2);
 
-- Call the procedure
EXEC InsertProductDetails
    @ProductName = 'Laptop',
    @Price = 50000,
    @GeneratedProductId = @GeneratedProductId OUTPUT,
    @DiscountedPrice = @DiscountedPrice OUTPUT;
 
-- Check the output values
SELECT @GeneratedProductId AS ProductId, @DiscountedPrice AS DiscountedPrice;
 
SELECT * FROM ProductsDetails;




